<style>
    :root {
        --bg-start: <%= colors.bgStart %>;
        --bg-end: <%= colors.bgEnd %>;
        --card-start: <%= colors.cardStart %>;
        --card-end: <%= colors.cardEnd %>;
        --button-start: <%= colors.buttonStart %>;
        --button-end: <%= colors.buttonEnd %>;
        --update-start: <%= colors.updateStart %>;
        --update-end: <%= colors.updateEnd %>;
        --text-color: <%= colors.textColor %>;
    }
</style>
<script>
    const CODE_REQUIRED = <%- verificationRequired ? 'true' : 'false' %>;
</script>
<div class="container">
    <div class="row justify-content-center mt-5">
        <div class="col-md-6 col-lg-4">
            <div class="card shadow-sm">
                <div class="card-header text-center py-4" style="background: linear-gradient(135deg, var(--card-start), var(--card-end)); color: var(--text-color);">
                    <% if (branding.panelLogoUrl) { %>
                        <a href="<%= branding.href %>" class="d-block mb-2">
                            <img src="<%= branding.panelLogoUrl %>" alt="Logo" style="height:60px;border-radius:50%;">
                        </a>
                    <% } %>
                    <a href="<%= branding.href %>" class="text-decoration-none" style="color: var(--text-color);">
                        <h4 class="mb-0"><%= branding.panelName || 'ChatGPT Codes' %></h4>
                    </a>
                    <p class="small mb-0" style="color: var(--text-color);">Sistema de Códigos</p>
                </div>
                <div class="card-body p-4">
                    <div id="loginForm">
                        <div class="mb-3">
                            <label for="email" class="form-label">
                                <i class="fas fa-envelope me-2"></i><%= typeof messages !== 'undefined' && messages.emailLabel ? messages.emailLabel : 'Email' %>
                            </label>
                            <input type="email" class="form-control" id="email" required>
                        </div>
                        <button type="button" id="loginButton" class="btn btn-primary w-100" onclick="requestCode()">
                            <i class="fas fa-paper-plane me-2"></i><span id="loginBtnLabel">Solicitar Código</span>
                        </button>
                    </div>

                    <div id="verificationForm" style="display: none;">
                        <div class="mb-3">
                            <label for="code" class="form-label">
                                <i class="fas fa-key me-2"></i>Código de Verificação
                            </label>
                            <input type="text" class="form-control" id="code" required>
                        </div>
                        <button type="button" class="btn btn-success w-100 mb-2" onclick="verifyCode()">
                            <i class="fas fa-check me-2"></i>Verificar
                        </button>
                        <button type="button" class="btn btn-outline-secondary w-100" onclick="resetForm()">
                            <i class="fas fa-undo me-2"></i>Voltar
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Error Modal -->
<div class="modal fade" id="errorModal" tabindex="-1" aria-labelledby="errorModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="errorModalLabel">Alerta</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="errorModalMessage"></div>
        </div>
    </div>
</div>

<script>
    let currentEmail = '';
    let clientIPInfo = null;
    const clientReferrer = document.referrer || '';

    function showError(message) {
        const msgEl = document.getElementById('errorModalMessage');
        msgEl.textContent = message;
        const modal = new bootstrap.Modal(document.getElementById('errorModal'));
        modal.show();
    }

    const initialError = <%- JSON.stringify(errorMessage || '') %>;
    if (initialError) {
        document.addEventListener('DOMContentLoaded', () => {
            showError(initialError);
        });
    }

    async function captureIPInfo() {
        try {
            const res = await fetch('https://ipwho.is/');
            clientIPInfo = await res.json();
        } catch (e) {
            console.error('Erro ao obter IP:', e);
            clientIPInfo = null;
        }
    }

    document.addEventListener('DOMContentLoaded', function() {
        captureIPInfo();
        if(!CODE_REQUIRED) {
            document.getElementById('verificationForm').style.display = 'none';
            document.getElementById('loginBtnLabel').textContent = 'Entrar';
        }
    });

    async function requestCode() {
        const email = document.getElementById('email').value;
        if (!email) {
            showError('Por favor, insira um email válido.');
            return;
        }

        try {
            if (!clientIPInfo) await captureIPInfo();
            const response = await fetch('/api/login', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    email,
                    ip: clientIPInfo ? clientIPInfo.ip : null,
                    ipInfo: clientIPInfo,
                    referer: clientReferrer
                })
            });

            const data = await response.json();

            if (response.ok) {
                currentEmail = email;
                if (CODE_REQUIRED) {
                    document.getElementById('loginForm').style.display = 'none';
                    document.getElementById('verificationForm').style.display = 'block';
                } else {
                    window.location.href = '/codes';
                }
            } else {
                showError(data.error || 'Erro ao enviar código.');
            }
        } catch (error) {
            console.error('Error:', error);
            showError('Erro ao enviar código. Tente novamente.');
        }
    }

    async function verifyCode() {
        const code = document.getElementById('code').value;
        if (!code) {
            showError('Por favor, insira o código de verificação.');
            return;
        }

        try {
            if (!clientIPInfo) await captureIPInfo();
            const response = await fetch('/api/verify', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    email: currentEmail,
                    code: code,
                    ip: clientIPInfo ? clientIPInfo.ip : null,
                    ipInfo: clientIPInfo,
                    referer: clientReferrer
                })
            });

            const data = await response.json();
            
            if (response.ok) {
                window.location.href = '/codes';
            } else {
                showError(data.error || 'Código inválido.');
            }
        } catch (error) {
            console.error('Error:', error);
            showError('Erro ao verificar código. Tente novamente.');
        }
    }

    function resetForm() {
        currentEmail = '';
        document.getElementById('loginForm').style.display = 'block';
        document.getElementById('verificationForm').style.display = 'none';
        document.getElementById('code').value = '';
    }
</script>
