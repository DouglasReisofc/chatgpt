<h2 class="mb-4">Configurações do Sistema</h2>
<div class="card settings-card mb-4">
    <div class="card-body">
        <h4 class="card-title mb-4">Configurações Globais de Sessão</h4>
        <form id="globalSettingsForm">
            <div class="row g-3 mb-3">
                <div class="col-md-6">
                    <label for="globalMaxSessions" class="form-label">Limite de Sessões Padrão</label>
                    <input type="number" id="globalMaxSessions" class="form-control" min="1" required>
                </div>
                <div class="col-md-6">
                    <label for="globalSessionDuration" class="form-label">Duração da Sessão (minutos)</label>
                    <input type="number" id="globalSessionDuration" class="form-control" min="1" required>
                </div>
            </div>
            <button type="submit" class="btn btn-primary">Salvar Configurações</button>
        </form>
        <div id="globalSettingsMessage" class="mt-3"></div>
        <div class="form-check form-switch mt-3">
            <input class="form-check-input" type="checkbox" id="codeLimitEnabled" <%= codeLimit.enabled ? 'checked' : '' %>>
            <label class="form-check-label" for="codeLimitEnabled">Limitar acessos ao painel</label>
        </div>
        <div id="codeLimitMessage" class="mt-2"></div>
    </div>
</div>

<div class="card settings-card mb-4">
    <div class="card-body">
        <h4 class="card-title mb-4">Bloqueio de IPs</h4>
        <form id="ipBlockForm" class="mb-4">
            <div class="row g-3">
                <div class="col-md-8">
                    <input type="text" id="ipAddress" class="form-control" placeholder="Digite o endereço IP" pattern="^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$" required>
                </div>
                <div class="col-md-4">
                    <button type="submit" class="btn btn-danger w-100">Bloquear IP</button>
                </div>
            </div>
        </form>
        <div class="table-responsive">
            <table class="table" id="blockedIpsTable">
                <thead>
                    <tr>
                        <th>Endereço IP</th>
                        <th>Data de Bloqueio</th>
                        <th>Ações</th>
                    </tr>
                </thead>
                <tbody>
                    <% blockedIps.forEach(ip => { %>
                    <tr>
                        <td><%= ip.address %></td>
                        <td><%= new Date(ip.blockedAt).toLocaleString() %></td>
                        <td>
                            <button class="btn btn-sm btn-success unblock-ip" data-ip="<%= ip.address %>">Desbloquear</button>
                        </td>
                    </tr>
                    <% }); %>
                </tbody>
            </table>
        </div>
    </div>
</div>

<div class="card settings-card mb-4">
    <div class="card-body">
        <h4 class="card-title mb-4">Gerenciamento de Logs</h4>
        <p class="text-danger">Atenção: Esta ação irá apagar permanentemente todos os logs do sistema.</p>
        <button id="resetLogsBtn" class="btn btn-danger">
            <i class="fas fa-trash-alt me-2"></i>Resetar Todos os Logs
        </button>
    </div>
</div>

<div class="card settings-card">
    <div class="card-body">
        <h4 class="card-title mb-4">Gerenciamento de Sessões</h4>
        <p class="text-danger">Esta ação encerra todas as sessões ativas.</p>
        <button id="resetSessionsBtn" class="btn btn-warning">
            <i class="fas fa-power-off me-2"></i>Resetar Sessões
        </button>
    </div>
</div>

<!-- Reset Logs Confirmation Modal -->
<div class="modal fade" id="resetLogsModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirmar Reset de Logs</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>Você tem certeza que deseja apagar todos os logs do sistema? Esta ação não pode ser desfeita.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-danger" id="confirmResetLogs">Confirmar Reset</button>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const globalSettingsForm = document.getElementById('globalSettingsForm');
        const ipBlockForm = document.getElementById('ipBlockForm');
        const resetLogsBtn = document.getElementById('resetLogsBtn');
        const resetLogsModal = new bootstrap.Modal(document.getElementById('resetLogsModal'));
        const confirmResetLogsBtn = document.getElementById('confirmResetLogs');
        const resetSessionsBtn = document.getElementById('resetSessionsBtn');

        const maxSessionsInput = document.getElementById('globalMaxSessions');
        const sessionDurationInput = document.getElementById('globalSessionDuration');
        maxSessionsInput.value = <%= globalSettings.maxSessions %>;
        sessionDurationInput.value = <%= globalSettings.sessionDuration %>;
        const codeLimitSwitch = document.getElementById('codeLimitEnabled');
        codeLimitSwitch.addEventListener('change', async function() {
            const enabled = codeLimitSwitch.checked;
            try {
                const response = await fetch('/admin/settings/code-limit', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ enabled })
                });
                if (response.ok) {
                    showMessage('codeLimitMessage', 'Configuração atualizada', 'success');
                } else {
                    showMessage('codeLimitMessage', 'Erro ao salvar configuração', 'danger');
                }
            } catch (error) {
                showMessage('codeLimitMessage', 'Erro ao salvar configuração', 'danger');
            }
        });

        globalSettingsForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            const maxSessions = parseInt(maxSessionsInput.value);
            const sessionDuration = parseInt(sessionDurationInput.value);
            try {
                const response = await fetch('/admin/settings/global', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ maxSessions, sessionDuration })
                });
                if (response.ok) {
                    showMessage('globalSettingsMessage', 'Configurações salvas com sucesso!', 'success');
                } else {
                    showMessage('globalSettingsMessage', 'Erro ao salvar configurações.', 'danger');
                }
            } catch (error) {
                showMessage('globalSettingsMessage', 'Erro ao salvar configurações.', 'danger');
            }
        });

        ipBlockForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            const ipAddress = document.getElementById('ipAddress').value;
            try {
                const response = await fetch('/admin/settings/block-ip', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ ip: ipAddress })
                });
                if (response.ok) {
                    location.reload();
                } else {
                    alert('Erro ao bloquear IP.');
                }
            } catch (error) {
                alert('Erro ao bloquear IP.');
            }
        });

        document.querySelectorAll('.unblock-ip').forEach(button => {
            button.addEventListener('click', async function() {
                const ip = this.dataset.ip;
                try {
                    const response = await fetch('/admin/settings/unblock-ip', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ ip })
                    });
                    if (response.ok) {
                        location.reload();
                    } else {
                        alert('Erro ao desbloquear IP.');
                    }
                } catch (error) {
                    alert('Erro ao desbloquear IP.');
                }
            });
        });

        resetLogsBtn.addEventListener('click', () => resetLogsModal.show());

        confirmResetLogsBtn.addEventListener('click', async function() {
            try {
                const response = await fetch('/admin/settings/reset-logs', { method: 'POST' });
                if (response.ok) {
                    resetLogsModal.hide();
                    location.reload();
                } else {
                    alert('Erro ao resetar logs.');
                }
            } catch (error) {
                alert('Erro ao resetar logs.');
            }
        });

        resetSessionsBtn.addEventListener('click', async function() {
            if(confirm('Deseja encerrar todas as sessões ativas?')) {
                try {
                    const response = await fetch('/admin/settings/reset-sessions', { method: 'POST' });
                    if (response.ok) {
                        alert('Sessões resetadas');
                    } else {
                        alert('Erro ao resetar sessões');
                    }
                } catch (error) {
                    alert('Erro ao resetar sessões');
                }
            }
        });

        function showMessage(elementId, message, type) {
            const element = document.getElementById(elementId);
            element.className = `alert alert-${type} mt-3`;
            element.textContent = message;
            setTimeout(() => element.remove(), 3000);
        }
    });
</script>
