<h2 class="mb-4">Configurações do Sistema</h2>

<div class="card settings-card mb-4">
    <div class="card-body">
        <h4 class="card-title mb-4">Gerenciamento de Logs</h4>
        <p class="text-danger">Atenção: Esta ação irá apagar permanentemente todos os logs do sistema.</p>
        <button id="resetLogsBtn" class="btn btn-danger">
            <i class="fas fa-trash-alt me-2"></i>Resetar Todos os Logs
        </button>
    </div>
</div>

<div class="card settings-card">
    <div class="card-body">
        <h4 class="card-title mb-4">Gerenciamento de Sessões</h4>
        <p class="text-danger">Esta ação encerra todas as sessões ativas.</p>
        <button id="resetSessionsBtn" class="btn btn-warning">
            <i class="fas fa-power-off me-2"></i>Resetar Sessões
        </button>
    </div>
</div>

<div class="card settings-card mt-4">
    <div class="card-body">
        <h4 class="card-title mb-4">Exibição de Códigos</h4>
        <form id="codesLimitForm">
            <div class="mb-3">
                <label for="codesLimit" class="form-label">Quantidade de Códigos a Exibir</label>
                <input type="number" id="codesLimit" class="form-control" min="1" value="<%= codeLimit %>">
            </div>
            <button type="submit" class="btn btn-primary">Salvar</button>
        </form>
        <div id="codesLimitMessage" class="mt-3"></div>
    </div>
</div>

<div class="card settings-card mt-4">
    <div class="card-body">
        <h4 class="card-title mb-4">Branding</h4>
        <form id="brandingForm" enctype="multipart/form-data">
            <div class="mb-3">
                <label for="panelLogoUrl" class="form-label">Logo do Painel (URL)</label>
                <input type="text" id="panelLogoUrl" class="form-control" value="<%= branding.panelLogoUrl %>">
                <input type="file" id="panelLogoFile" class="form-control mt-2">
            </div>
            <div class="mb-3">
                <label for="cardLogoUrl" class="form-label">Logo do Card (URL)</label>
                <input type="text" id="cardLogoUrl" class="form-control" value="<%= branding.cardLogoUrl %>">
                <input type="file" id="cardLogoFile" class="form-control mt-2">
            </div>
            <div class="mb-3">
                <label for="siteHref" class="form-label">Link da Página</label>
                <input type="text" id="siteHref" class="form-control" value="<%= branding.href %>">
            </div>
            <button type="submit" class="btn btn-primary">Salvar</button>
        </form>
        <div id="brandingMessage" class="mt-3"></div>
    </div>
</div>

<!-- Reset Logs Confirmation Modal -->
<div class="modal fade" id="resetLogsModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirmar Reset de Logs</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>Você tem certeza que deseja apagar todos os logs do sistema? Esta ação não pode ser desfeita.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-danger" id="confirmResetLogs">Confirmar Reset</button>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const resetLogsBtn = document.getElementById('resetLogsBtn');
        const resetLogsModal = new bootstrap.Modal(document.getElementById('resetLogsModal'));
        const confirmResetLogsBtn = document.getElementById('confirmResetLogs');
        const resetSessionsBtn = document.getElementById('resetSessionsBtn');
        const codesLimitForm = document.getElementById('codesLimitForm');
        const codesLimitInput = document.getElementById('codesLimit');
        const brandingForm = document.getElementById('brandingForm');
        const panelLogoInput = document.getElementById('panelLogoUrl');
        const cardLogoInput = document.getElementById('cardLogoUrl');
        const panelLogoFile = document.getElementById('panelLogoFile');
        const cardLogoFile = document.getElementById('cardLogoFile');
        const hrefInput = document.getElementById('siteHref');

        codesLimitForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            const val = parseInt(codesLimitInput.value);
            try {
                const res = await fetch('/admin/settings/code-display-limit', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ limit: val })
                });
                if (res.ok) {
                    showMessage('codesLimitMessage', 'Limite salvo', 'success');
                } else {
                    showMessage('codesLimitMessage', 'Erro ao salvar limite', 'danger');
                }
            } catch (err) {
                showMessage('codesLimitMessage', 'Erro ao salvar limite', 'danger');
            }
        });

        brandingForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            try {
                const form = new FormData();
                form.append('panelLogoUrl', panelLogoInput.value);
                form.append('cardLogoUrl', cardLogoInput.value);
                form.append('href', hrefInput.value);
                if (panelLogoFile.files[0]) form.append('panelLogoFile', panelLogoFile.files[0]);
                if (cardLogoFile.files[0]) form.append('cardLogoFile', cardLogoFile.files[0]);

                const res = await fetch('/admin/settings/branding', {
                    method: 'POST',
                    body: form
                });
                if (res.ok) {
                    showMessage('brandingMessage', 'Branding salvo', 'success');
                } else {
                    showMessage('brandingMessage', 'Erro ao salvar', 'danger');
                }
            } catch (err) {
                showMessage('brandingMessage', 'Erro ao salvar', 'danger');
            }
        });

        function showMessage(id, msg, type) {
            const el = document.getElementById(id);
            el.className = `alert alert-${type}`;
            el.textContent = msg;
            setTimeout(() => { el.textContent = ''; el.className = ''; }, 3000);
        }



        resetLogsBtn.addEventListener('click', () => resetLogsModal.show());

        confirmResetLogsBtn.addEventListener('click', async function() {
            try {
                const response = await fetch('/admin/settings/reset-logs', { method: 'POST' });
                if (response.ok) {
                    resetLogsModal.hide();
                    location.reload();
                } else {
                    alert('Erro ao resetar logs.');
                }
            } catch (error) {
                alert('Erro ao resetar logs.');
            }
        });

        resetSessionsBtn.addEventListener('click', async function() {
            if(confirm('Deseja encerrar todas as sessões ativas?')) {
                try {
                    const response = await fetch('/admin/settings/reset-sessions', { method: 'POST' });
                    if (response.ok) {
                        alert('Sessões resetadas');
                    } else {
                        alert('Erro ao resetar sessões');
                    }
                } catch (error) {
                    alert('Erro ao resetar sessões');
                }
            }
        });

    });
</script>
